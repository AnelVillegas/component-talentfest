{"version":3,"sources":["components/EmployeeNav.jsx","App.js","serviceWorker.js","index.js"],"names":["EmployeeNav","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","Component","App","_this","state","startDate","Date","handleChange","bind","assertThisInitialized","date","setState","react","components_EmployeeNav","Form","Row","Col","Control","placeholder","es","selected","onChange","minDate","subDays","placeholderText","showTimeSelect","showTimeSelectOnly","timeIntervals","dateFormat","timeCaption","Label","as","Button","variant","type","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAmBiBA,cAhBb,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACZH,0EAGN,OAEEO,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,qBARgBC,sCC4FXC,cArFb,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAZ,OAAAC,EAAA,EAAAD,CAAAE,KAAAS,IACjBC,EAAAZ,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAW,GAAAN,KAAAH,KAAMH,KACDc,MAAQ,CACXC,UAAW,IAAIC,MAEjBH,EAAKI,aAAeJ,EAAKI,aAAaC,KAAlBjB,OAAAkB,EAAA,EAAAlB,CAAAY,IALHA,4EAQNO,GACXjB,KAAKkB,SAAS,CACZN,UAAWK,qCAOb,OACEb,EAAAC,EAAAC,cAACa,EAAA,SAAD,KACAf,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACc,EAAD,OAEFhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAACe,EAAA,EAAKG,QAAN,CAAcC,YAAY,UAE5BrB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAACe,EAAA,EAAKG,QAAN,CAAcC,YAAY,YAG9BrB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAACe,EAAA,EAAKG,QAAN,CAAcC,YAAY,mBAE5BrB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAACe,EAAA,EAAKG,QAAN,CAAcC,YAAY,cAG9BrB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KAEGnB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACCC,SAAU3B,KAAKW,MAAMC,UACrBgB,SAAU5B,KAAKc,aACde,QAASC,YAAQ,IAAIjB,MAAS,GAC9BkB,gBAAgB,mBAIrB3B,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACFC,SAAU3B,KAAKW,MAAMC,UACrBgB,SAAU5B,KAAKc,aACfkB,gBAAc,EACdC,oBAAkB,EAClBC,cAAe,GACfC,WAAW,UACXC,YAAY,WAIdhC,EAAAC,EAAAC,cAACe,EAAA,EAAKgB,MAAN,cACEjC,EAAAC,EAAAC,cAACe,EAAA,EAAKG,QAAN,CAAcc,GAAG,UACflC,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,qBAGNF,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,UAA/B,mBA1EYjC,aCIEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9bfaf32c.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass EmployeeNav extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n    render(){\r\n      return (\r\n    \r\n        <nav>\r\n          <h2 className=\"logo\">Rulesware</h2>\r\n        </nav>\r\n       \r\n\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n  export default EmployeeNav; ","import React, {Component, Fragment} from 'react';\nimport './App.css';\nimport {Form, Row, Col, Button} from 'react-bootstrap';\nimport EmployeeNav from './components/EmployeeNav';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport subDays  from \"date-fns/subDays\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startDate: new Date()\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n \n  handleChange(date) {\n    this.setState({\n      startDate: date\n    });\n  }\n\n  render(){\n\n\n    return (\n      <Fragment>\n      <div>\n      <EmployeeNav/>\n      </div>\n    <div>\n      <Form>\n        <Row>\n          <Col>\n            <div>Nombre del empleado</div>\n            <Form.Control placeholder=\"Name\" />\n          </Col>\n          <Col>\n            <Form.Control placeholder=\"Coach\" />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Form.Control placeholder=\"Certification\" />\n          </Col>\n          <Col>\n            <Form.Control placeholder=\"Version\" />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            {/*<Form.Control placeholder=\"Date\"*/}\n             <DatePicker\n              selected={this.state.startDate}\n              onChange={this.handleChange}\n               minDate={subDays(new Date(), -1)}\n               placeholderText=\"Select a date\"\n               />\n           {/*</Form.Control>*/}\n          </Col>\n          <Col>\n            <DatePicker\n          selected={this.state.startDate}\n          onChange={this.handleChange}\n          showTimeSelect\n          showTimeSelectOnly\n          timeIntervals={30}\n          dateFormat=\"h:mm aa\"\n          timeCaption=\"Time\"\n           />\n          </Col>\n        </Row>\n        <Form.Label>Place</Form.Label>\n          <Form.Control as=\"select\">\n            <option>1</option>\n            <option>2</option>\n            <option>3</option>\n            <option>4</option>\n            <option>5</option>\n          </Form.Control> \n      </Form> \n      <Button variant=\"primary\" type=\"submit\">\n          Submit\n      </Button>\n\n    </div>\n    </Fragment>\n      \n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}